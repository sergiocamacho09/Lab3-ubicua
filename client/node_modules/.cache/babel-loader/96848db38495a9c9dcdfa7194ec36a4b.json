{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\camac\\\\Desktop\\\\lab3-ubicua\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { InputMessages } from \"./components/InputMessages\";\nimport socket from \"./components/Socket\";\nimport { Messages } from \"./components/Messages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chance = require('chance');\n\nconst generate = new Chance();\nlet users = [];\nlet message = \"\";\n\nfunction App() {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [userList, setUsers] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  useEffect(() => {\n    let newUser = generate.name();\n    setName(newUser);\n    socket.emit(\"newUser\", newUser);\n  }, []);\n  /*Code used to show all the users that they are already connected*/\n\n  useEffect(() => {\n    printUsers();\n  }, [userList]);\n\n  function printUsers() {\n    let div = document.getElementById(\"UsersList\");\n\n    if (toggle) {\n      for (var i = 0; i < userList.length; i++) {\n        if (userList[i] !== name) {\n          div.innerHTML += \"<div class='AppUser'>\" + userList[i] + \"</div>\";\n        }\n      }\n    } else {\n      div.innerHTML = \"\";\n    }\n  }\n\n  function loadUsers() {\n    socket.emit(\"usersConnected\");\n    socket.on(\"userList\", array => {\n      users = array;\n      setUsers(users);\n    });\n    setToggle(toggle => !toggle);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"Header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"UserName\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"UsersList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"ViewUsers\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"ToggleButton\",\n          onClick: loadUsers,\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputMessages, {\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"DXjiY7N+OIVdZKNZlE4fSCw4Vjg=\");\n\n_c = App;\nexport default App;\n/*\r\nconst socket = io();\r\nconst button = document.querySelector(\"button\");\r\nconst input = document.querySelector(\"input\");\r\nconst msg = document.querySelector(\"#msg\");\r\n\r\nbutton.addEventListener(\"click\", function(e) {\r\n  const text = input.value;\r\n  //enviarselo al servidor\r\n  socket.emit(\"message_evt\", {msg: text});\r\n});\r\n\r\nsocket.on(\"message_evt\", function(message){\r\n  msg.innerHTML = message.msg;\r\n});\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/camac/Desktop/lab3-ubicua/client/src/App.js"],"names":["useState","useEffect","InputMessages","socket","Messages","Chance","require","generate","users","message","App","name","setName","userList","setUsers","toggle","setToggle","newUser","emit","printUsers","div","document","getElementById","i","length","innerHTML","loadUsers","on","array"],"mappings":"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","sourcesContent":["import \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { InputMessages } from \"./components/InputMessages\";\r\nimport socket from \"./components/Socket\";\r\nimport { Messages } from \"./components/Messages\";\r\nconst Chance = require('chance');\r\nconst generate = new Chance();\r\nlet users = [];\r\n\r\nlet message = \"\";\r\nfunction App() {\r\n  const [name, setName] = useState(\"\");\r\n  const [userList, setUsers] = useState([]);\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let newUser = generate.name();\r\n    setName(newUser);\r\n    socket.emit(\"newUser\", newUser);\r\n  }, []);\r\n\r\n  /*Code used to show all the users that they are already connected*/\r\n\r\n  useEffect(() => {\r\n    printUsers();\r\n  }, [userList]);\r\n\r\n  function printUsers() {\r\n    let div = document.getElementById(\"UsersList\");\r\n    if (toggle) {\r\n      for (var i = 0; i < userList.length; i++) {\r\n        if (userList[i] !== name) {\r\n          div.innerHTML += \"<div class='AppUser'>\" + userList[i] + \"</div>\";\r\n        }\r\n      }\r\n    } else {\r\n      div.innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n\r\n  function loadUsers() {\r\n    socket.emit(\"usersConnected\");\r\n    socket.on(\"userList\", (array) => {\r\n      users = array;\r\n      setUsers(users);\r\n    });\r\n    setToggle((toggle) => !toggle);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"Header\">\r\n        <div id=\"UserName\">\r\n          {name}\r\n        </div>\r\n        <div id=\"UsersList\">\r\n\r\n        </div>\r\n        <div id=\"ViewUsers\">\r\n          <button id=\"ToggleButton\" onClick={loadUsers}>Users</button>\r\n        </div>\r\n      </div>\r\n      <Messages name={name}/>\r\n      <InputMessages name={name} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n/*\r\nconst socket = io();\r\nconst button = document.querySelector(\"button\");\r\nconst input = document.querySelector(\"input\");\r\nconst msg = document.querySelector(\"#msg\");\r\n\r\nbutton.addEventListener(\"click\", function(e) {\r\n  const text = input.value;\r\n  //enviarselo al servidor\r\n  socket.emit(\"message_evt\", {msg: text});\r\n});\r\n\r\nsocket.on(\"message_evt\", function(message){\r\n  msg.innerHTML = message.msg;\r\n});\r\n*/\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}